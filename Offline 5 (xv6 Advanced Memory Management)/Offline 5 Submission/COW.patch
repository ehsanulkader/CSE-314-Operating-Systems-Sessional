diff --git a/COW_NEW.patch b/COW_NEW.patch
new file mode 100644
index 0000000..d420fb6
--- /dev/null
+++ b/COW_NEW.patch
@@ -0,0 +1,594 @@
+diff --git a/COW.patch b/COW.patch
+new file mode 100755
+index 0000000..c9566f2
+--- /dev/null
++++ b/COW.patch
+@@ -0,0 +1,302 @@
++diff --git a/.vscode/settings.json b/.vscode/settings.json
++new file mode 100644
++index 0000000..a35d7ce
++--- /dev/null
+++++ b/.vscode/settings.json
++@@ -0,0 +1,6 @@
+++{
+++    "files.associations": {
+++        "riscv.h": "c",
+++        "cstdlib": "c"
+++    }
+++}
++\ No newline at end of file
++diff --git a/COW.patch b/COW.patch
++new file mode 100755
++index 0000000..e69de29
++diff --git a/kernel/defs.h b/kernel/defs.h
++index a3c962b..044f157 100644
++--- a/kernel/defs.h
+++++ b/kernel/defs.h
++@@ -60,6 +60,7 @@ void            ramdiskintr(void);
++ void            ramdiskrw(struct buf*);
++ 
++ // kalloc.c
+++void            inc_ref(uint64);
++ void*           kalloc(void);
++ void            kfree(void *);
++ void            kinit(void);
++diff --git a/kernel/kalloc.c b/kernel/kalloc.c
++index 0699e7e..9104d8a 100644
++--- a/kernel/kalloc.c
+++++ b/kernel/kalloc.c
++@@ -21,12 +21,31 @@ struct run {
++ struct {
++   struct spinlock lock;
++   struct run *freelist;
+++  int pg_ref_cnt[(PHYSTOP-KERNBASE)/PGSIZE];
++ } kmem;
++ 
+++int get_page_index(uint64 pa) {
+++  return pa/PGSIZE;
+++}
+++
+++void inc_ref(uint64 pa) {
+++  acquire(&kmem.lock);
+++  int index = get_page_index(pa);
+++  if (index < 0) {
+++    panic("invalid page index!");
+++  }
+++  kmem.pg_ref_cnt[index]++;
+++  release(&kmem.lock);
+++}
+++
++ void
++ kinit()
++ {
++   initlock(&kmem.lock, "kmem");
+++  int sz = (PHYSTOP-KERNBASE)/PGSIZE;
+++  for(int i=0; i<sz; i++) {
+++    kmem.pg_ref_cnt[i]=0;
+++  }
++   freerange(end, (void*)PHYSTOP);
++ }
++ 
++@@ -51,15 +70,28 @@ kfree(void *pa)
++   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
++     panic("kfree");
++ 
++-  // Fill with junk to catch dangling refs.
++-  memset(pa, 1, PGSIZE);
+++  int index = get_page_index((uint64)pa);
++ 
++-  r = (struct run*)pa;
+++  if (kmem.pg_ref_cnt[index] > 1) {
+++    acquire(&kmem.lock);
+++    kmem.pg_ref_cnt[index]--;
+++    release(&kmem.lock);
+++  } else {
+++    // Fill with junk to catch dangling refs.
+++    memset(pa, 1, PGSIZE);
++ 
++-  acquire(&kmem.lock);
++-  r->next = kmem.freelist;
++-  kmem.freelist = r;
++-  release(&kmem.lock);
+++    r = (struct run*)pa;
+++
+++    acquire(&kmem.lock);
+++
+++    r->next = kmem.freelist;
+++    kmem.freelist = r;
+++    kmem.pg_ref_cnt[index] = 0;
+++
+++    release(&kmem.lock);
+++  }
+++  
+++  
++ }
++ 
++ // Allocate one 4096-byte page of physical memory.
++@@ -72,11 +104,16 @@ kalloc(void)
++ 
++   acquire(&kmem.lock);
++   r = kmem.freelist;
++-  if(r)
+++  if(r) {
++     kmem.freelist = r->next;
+++    int index = get_page_index((uint64)r);
+++    kmem.pg_ref_cnt[index]++;
+++  }
++   release(&kmem.lock);
++ 
++-  if(r)
+++  if(r) {
++     memset((char*)r, 5, PGSIZE); // fill with junk
+++  }
+++  
++   return (void*)r;
++ }
++diff --git a/kernel/riscv.h b/kernel/riscv.h
++index 20a01db..951908e 100644
++--- a/kernel/riscv.h
+++++ b/kernel/riscv.h
++@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
++ #define PTE_W (1L << 2)
++ #define PTE_X (1L << 3)
++ #define PTE_U (1L << 4) // user can access
+++#define PTE_COW (1L << 8) //copy-on-write flag
++ 
++ // shift a physical address to the right place for a PTE.
++ #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
++diff --git a/kernel/trap.c b/kernel/trap.c
++index 512c850..bdb8f98 100644
++--- a/kernel/trap.c
+++++ b/kernel/trap.c
++@@ -65,6 +65,44 @@ usertrap(void)
++     intr_on();
++ 
++     syscall();
+++  } else if(r_scause() == 15){
+++    uint64 va = PGROUNDDOWN(r_stval());
+++    pte_t *pte;
+++    uint64 pa;
+++    uint flags;
+++    char *mem;
+++    if(va >= MAXVA) {
+++      setkilled(p);
+++      goto end;
+++    }
+++    
+++    if ((pte = walk(p->pagetable, va, 0)) == 0) {
+++      setkilled(p);
+++      goto end;
+++    }
+++    
+++    if ((*pte & PTE_V) && (*pte & PTE_U) && (*pte & PTE_COW)) {
+++      pa = PTE2PA(*pte);
+++
+++      flags = PTE_FLAGS(*pte);
+++      flags |= PTE_W;
+++      flags &= (~PTE_COW);
+++
+++      if((mem = kalloc()) == 0) {
+++        setkilled(p);
+++        goto end;
+++      }
+++      memmove(mem, (char*)pa, PGSIZE);
+++
+++      uvmunmap(p->pagetable, va, 1, 0);
+++
+++      kfree((void*)pa); //decrement reference count;
+++
+++      if (mappages(p->pagetable, va, PGSIZE, (uint64)mem, flags) != 0) {
+++        setkilled(p);
+++        goto end;
+++      }
+++    }
++   } else if((which_dev = devintr()) != 0){
++     // ok
++   } else {
++@@ -72,14 +110,14 @@ usertrap(void)
++     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
++     setkilled(p);
++   }
++-
+++end:
++   if(killed(p))
++     exit(-1);
++ 
++   // give up the CPU if this is a timer interrupt.
++   if(which_dev == 2)
++     yield();
++-
+++  
++   usertrapret();
++ }
++ 
++diff --git a/kernel/vm.c b/kernel/vm.c
++index 9f69783..5262ac5 100644
++--- a/kernel/vm.c
+++++ b/kernel/vm.c
++@@ -308,22 +308,42 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
++   pte_t *pte;
++   uint64 pa, i;
++   uint flags;
++-  char *mem;
+++  // char *mem;
++ 
++-  for(i = 0; i < sz; i += PGSIZE){
+++  for(i = 0; i < sz; i += PGSIZE) {
+++    if(i >= MAXVA)
+++      goto err;
++     if((pte = walk(old, i, 0)) == 0)
++       panic("uvmcopy: pte should exist");
++     if((*pte & PTE_V) == 0)
++       panic("uvmcopy: page not present");
++     pa = PTE2PA(*pte);
+++
+++    // *pte |= PTE_COW;
+++    // *pte &= (~PTE_W);
++     flags = PTE_FLAGS(*pte);
++-    if((mem = kalloc()) == 0)
+++    flags |= PTE_COW;
+++    flags &= (~PTE_W);
+++
+++    // if((mem = kalloc()) == 0)
+++    //   goto err;
+++    // memmove(mem, (char*)pa, PGSIZE);
+++    
+++    // if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+++    //   kfree(mem);
+++    //   goto err;
+++    // }
+++
+++    if(mappages(new, i, PGSIZE, pa, flags) != 0){
++       goto err;
++-    memmove(mem, (char*)pa, PGSIZE);
++-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
++-      kfree(mem);
+++    }
+++    inc_ref(pa);
+++    uvmunmap(old, i, 1, 0);
+++    // Re-add the mapping with write bit cleared flags.
+++    if (mappages(old, i, PGSIZE, pa, flags) != 0) {
++       goto err;
++     }
+++    
++   }
++   return 0;
++ 
++@@ -355,7 +375,41 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
++ 
++   while(len > 0){
++     va0 = PGROUNDDOWN(dstva);
++-    pa0 = walkaddr(pagetable, va0);
+++
+++    if(va0 >= MAXVA) {
+++      return -1;
+++    }
+++
+++    pte_t *pte;
+++
+++    if((pte = walk(pagetable, va0, 0)) == 0) 
+++      return -1;
+++
+++    if(!(*pte & PTE_V) || !(*pte & PTE_U))
+++      return -1;
+++
+++    pa0 = PTE2PA(*pte);
+++    if (*pte & PTE_COW) {
+++      uint flags;
+++      char *mem;
+++
+++      flags = PTE_FLAGS(*pte);
+++      flags |= PTE_W;
+++      flags &= (~PTE_COW);
+++
+++      if((mem = kalloc()) == 0)
+++        return -1;
+++      memmove(mem, (char*)pa0, PGSIZE);
+++
+++      uvmunmap(pagetable, va0, 1, 0);
+++
+++      kfree((void*)pa0); //decrement reference count;
+++
+++      if (mappages(pagetable, va0, PGSIZE, (uint64)mem, flags) != 0) {
+++        panic("panic: copyout mapping");
+++      }
+++    }
+++    // pa0 = walkaddr(pagetable, va0);
++     if(pa0 == 0)
++       return -1;
++     n = PGSIZE - (dstva - va0);
++@@ -370,6 +424,8 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
++   return 0;
++ }
++ 
+++
+++
++ // Copy from user to kernel.
++ // Copy len bytes to dst from virtual address srcva in a given page table.
++ // Return 0 on success, -1 on error.
+diff --git a/kernel/defs.h b/kernel/defs.h
+index a3c962b..044f157 100644
+--- a/kernel/defs.h
++++ b/kernel/defs.h
+@@ -60,6 +60,7 @@ void            ramdiskintr(void);
+ void            ramdiskrw(struct buf*);
+ 
+ // kalloc.c
++void            inc_ref(uint64);
+ void*           kalloc(void);
+ void            kfree(void *);
+ void            kinit(void);
+diff --git a/kernel/kalloc.c b/kernel/kalloc.c
+index 0699e7e..db4039d 100644
+--- a/kernel/kalloc.c
++++ b/kernel/kalloc.c
+@@ -21,12 +21,31 @@ struct run {
+ struct {
+   struct spinlock lock;
+   struct run *freelist;
++  int pg_ref_cnt[PHYSTOP/PGSIZE+1];
+ } kmem;
+ 
++int get_page_index(uint64 pa) {
++  return pa/PGSIZE;
++}
++
++void inc_ref(uint64 pa) {
++  acquire(&kmem.lock);
++  int index = get_page_index(pa);
++  if (index < 0) {
++    panic("invalid page index!");
++  }
++  kmem.pg_ref_cnt[index]++;
++  release(&kmem.lock);
++}
++
+ void
+ kinit()
+ {
+   initlock(&kmem.lock, "kmem");
++  int sz = PHYSTOP/PGSIZE;
++  for(int i=0; i<sz; i++) {
++    kmem.pg_ref_cnt[i]=0;
++  }
+   freerange(end, (void*)PHYSTOP);
+ }
+ 
+@@ -51,15 +70,28 @@ kfree(void *pa)
+   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
+     panic("kfree");
+ 
+-  // Fill with junk to catch dangling refs.
+-  memset(pa, 1, PGSIZE);
++  int index = get_page_index((uint64)pa);
+ 
+-  r = (struct run*)pa;
++  if (kmem.pg_ref_cnt[index] > 1) {
++    acquire(&kmem.lock);
++    kmem.pg_ref_cnt[index]--;
++    release(&kmem.lock);
++  } else {
++    // Fill with junk to catch dangling refs.
++    memset(pa, 1, PGSIZE);
+ 
+-  acquire(&kmem.lock);
+-  r->next = kmem.freelist;
+-  kmem.freelist = r;
+-  release(&kmem.lock);
++    r = (struct run*)pa;
++
++    acquire(&kmem.lock);
++
++    r->next = kmem.freelist;
++    kmem.freelist = r;
++    kmem.pg_ref_cnt[index] = 0;
++
++    release(&kmem.lock);
++  }
++  
++  
+ }
+ 
+ // Allocate one 4096-byte page of physical memory.
+@@ -72,11 +104,16 @@ kalloc(void)
+ 
+   acquire(&kmem.lock);
+   r = kmem.freelist;
+-  if(r)
++  if(r) {
+     kmem.freelist = r->next;
++    int index = get_page_index((uint64)r);
++    kmem.pg_ref_cnt[index]++;
++  }
+   release(&kmem.lock);
+ 
+-  if(r)
++  if(r) {
+     memset((char*)r, 5, PGSIZE); // fill with junk
++  }
++  
+   return (void*)r;
+ }
+diff --git a/kernel/riscv.h b/kernel/riscv.h
+index 20a01db..951908e 100644
+--- a/kernel/riscv.h
++++ b/kernel/riscv.h
+@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
+ #define PTE_W (1L << 2)
+ #define PTE_X (1L << 3)
+ #define PTE_U (1L << 4) // user can access
++#define PTE_COW (1L << 8) //copy-on-write flag
+ 
+ // shift a physical address to the right place for a PTE.
+ #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
+diff --git a/kernel/trap.c b/kernel/trap.c
+index 512c850..bdb8f98 100644
+--- a/kernel/trap.c
++++ b/kernel/trap.c
+@@ -65,6 +65,44 @@ usertrap(void)
+     intr_on();
+ 
+     syscall();
++  } else if(r_scause() == 15){
++    uint64 va = PGROUNDDOWN(r_stval());
++    pte_t *pte;
++    uint64 pa;
++    uint flags;
++    char *mem;
++    if(va >= MAXVA) {
++      setkilled(p);
++      goto end;
++    }
++    
++    if ((pte = walk(p->pagetable, va, 0)) == 0) {
++      setkilled(p);
++      goto end;
++    }
++    
++    if ((*pte & PTE_V) && (*pte & PTE_U) && (*pte & PTE_COW)) {
++      pa = PTE2PA(*pte);
++
++      flags = PTE_FLAGS(*pte);
++      flags |= PTE_W;
++      flags &= (~PTE_COW);
++
++      if((mem = kalloc()) == 0) {
++        setkilled(p);
++        goto end;
++      }
++      memmove(mem, (char*)pa, PGSIZE);
++
++      uvmunmap(p->pagetable, va, 1, 0);
++
++      kfree((void*)pa); //decrement reference count;
++
++      if (mappages(p->pagetable, va, PGSIZE, (uint64)mem, flags) != 0) {
++        setkilled(p);
++        goto end;
++      }
++    }
+   } else if((which_dev = devintr()) != 0){
+     // ok
+   } else {
+@@ -72,14 +110,14 @@ usertrap(void)
+     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
+     setkilled(p);
+   }
+-
++end:
+   if(killed(p))
+     exit(-1);
+ 
+   // give up the CPU if this is a timer interrupt.
+   if(which_dev == 2)
+     yield();
+-
++  
+   usertrapret();
+ }
+ 
+diff --git a/kernel/vm.c b/kernel/vm.c
+index 9f69783..5262ac5 100644
+--- a/kernel/vm.c
++++ b/kernel/vm.c
+@@ -308,22 +308,42 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
+   pte_t *pte;
+   uint64 pa, i;
+   uint flags;
+-  char *mem;
++  // char *mem;
+ 
+-  for(i = 0; i < sz; i += PGSIZE){
++  for(i = 0; i < sz; i += PGSIZE) {
++    if(i >= MAXVA)
++      goto err;
+     if((pte = walk(old, i, 0)) == 0)
+       panic("uvmcopy: pte should exist");
+     if((*pte & PTE_V) == 0)
+       panic("uvmcopy: page not present");
+     pa = PTE2PA(*pte);
++
++    // *pte |= PTE_COW;
++    // *pte &= (~PTE_W);
+     flags = PTE_FLAGS(*pte);
+-    if((mem = kalloc()) == 0)
++    flags |= PTE_COW;
++    flags &= (~PTE_W);
++
++    // if((mem = kalloc()) == 0)
++    //   goto err;
++    // memmove(mem, (char*)pa, PGSIZE);
++    
++    // if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
++    //   kfree(mem);
++    //   goto err;
++    // }
++
++    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+       goto err;
+-    memmove(mem, (char*)pa, PGSIZE);
+-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+-      kfree(mem);
++    }
++    inc_ref(pa);
++    uvmunmap(old, i, 1, 0);
++    // Re-add the mapping with write bit cleared flags.
++    if (mappages(old, i, PGSIZE, pa, flags) != 0) {
+       goto err;
+     }
++    
+   }
+   return 0;
+ 
+@@ -355,7 +375,41 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
+ 
+   while(len > 0){
+     va0 = PGROUNDDOWN(dstva);
+-    pa0 = walkaddr(pagetable, va0);
++
++    if(va0 >= MAXVA) {
++      return -1;
++    }
++
++    pte_t *pte;
++
++    if((pte = walk(pagetable, va0, 0)) == 0) 
++      return -1;
++
++    if(!(*pte & PTE_V) || !(*pte & PTE_U))
++      return -1;
++
++    pa0 = PTE2PA(*pte);
++    if (*pte & PTE_COW) {
++      uint flags;
++      char *mem;
++
++      flags = PTE_FLAGS(*pte);
++      flags |= PTE_W;
++      flags &= (~PTE_COW);
++
++      if((mem = kalloc()) == 0)
++        return -1;
++      memmove(mem, (char*)pa0, PGSIZE);
++
++      uvmunmap(pagetable, va0, 1, 0);
++
++      kfree((void*)pa0); //decrement reference count;
++
++      if (mappages(pagetable, va0, PGSIZE, (uint64)mem, flags) != 0) {
++        panic("panic: copyout mapping");
++      }
++    }
++    // pa0 = walkaddr(pagetable, va0);
+     if(pa0 == 0)
+       return -1;
+     n = PGSIZE - (dstva - va0);
+@@ -370,6 +424,8 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
+   return 0;
+ }
+ 
++
++
+ // Copy from user to kernel.
+ // Copy len bytes to dst from virtual address srcva in a given page table.
+ // Return 0 on success, -1 on error.
diff --git a/Makefile b/Makefile
index 39a99d7..d47337d 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,7 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_cowtest\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..044f157 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -60,6 +60,7 @@ void            ramdiskintr(void);
 void            ramdiskrw(struct buf*);
 
 // kalloc.c
+void            inc_ref(uint64);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..db4039d 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -21,12 +21,31 @@ struct run {
 struct {
   struct spinlock lock;
   struct run *freelist;
+  int pg_ref_cnt[PHYSTOP/PGSIZE+1];
 } kmem;
 
+int get_page_index(uint64 pa) {
+  return pa/PGSIZE;
+}
+
+void inc_ref(uint64 pa) {
+  acquire(&kmem.lock);
+  int index = get_page_index(pa);
+  if (index < 0) {
+    panic("invalid page index!");
+  }
+  kmem.pg_ref_cnt[index]++;
+  release(&kmem.lock);
+}
+
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  int sz = PHYSTOP/PGSIZE;
+  for(int i=0; i<sz; i++) {
+    kmem.pg_ref_cnt[i]=0;
+  }
   freerange(end, (void*)PHYSTOP);
 }
 
@@ -51,15 +70,28 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
-  // Fill with junk to catch dangling refs.
-  memset(pa, 1, PGSIZE);
+  int index = get_page_index((uint64)pa);
 
-  r = (struct run*)pa;
+  if (kmem.pg_ref_cnt[index] > 1) {
+    acquire(&kmem.lock);
+    kmem.pg_ref_cnt[index]--;
+    release(&kmem.lock);
+  } else {
+    // Fill with junk to catch dangling refs.
+    memset(pa, 1, PGSIZE);
 
-  acquire(&kmem.lock);
-  r->next = kmem.freelist;
-  kmem.freelist = r;
-  release(&kmem.lock);
+    r = (struct run*)pa;
+
+    acquire(&kmem.lock);
+
+    r->next = kmem.freelist;
+    kmem.freelist = r;
+    kmem.pg_ref_cnt[index] = 0;
+
+    release(&kmem.lock);
+  }
+  
+  
 }
 
 // Allocate one 4096-byte page of physical memory.
@@ -72,11 +104,16 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r) {
     kmem.freelist = r->next;
+    int index = get_page_index((uint64)r);
+    kmem.pg_ref_cnt[index]++;
+  }
   release(&kmem.lock);
 
-  if(r)
+  if(r) {
     memset((char*)r, 5, PGSIZE); // fill with junk
+  }
+  
   return (void*)r;
 }
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..951908e 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_COW (1L << 8) //copy-on-write flag
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..1980bba 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -65,6 +65,44 @@ usertrap(void)
     intr_on();
 
     syscall();
+  } else if(r_scause() == 15 || r_scause() == 13){
+    uint64 va = PGROUNDDOWN(r_stval());
+    pte_t *pte;
+    uint64 pa;
+    uint flags;
+    char *mem;
+    if(va >= MAXVA) {
+      setkilled(p);
+      goto end;
+    }
+    
+    if ((pte = walk(p->pagetable, va, 0)) == 0) {
+      setkilled(p);
+      goto end;
+    }
+    
+    if ((*pte & PTE_V) && (*pte & PTE_U) && (*pte & PTE_COW)) {
+      pa = PTE2PA(*pte);
+
+      flags = PTE_FLAGS(*pte);
+      flags |= PTE_W;
+      flags &= (~PTE_COW);
+
+      if((mem = kalloc()) == 0) {
+        setkilled(p);
+        goto end;
+      }
+      memmove(mem, (char*)pa, PGSIZE);
+
+      uvmunmap(p->pagetable, va, 1, 0);
+
+      kfree((void*)pa); //decrement reference count;
+
+      if (mappages(p->pagetable, va, PGSIZE, (uint64)mem, flags) != 0) {
+        setkilled(p);
+        goto end;
+      }
+    }
   } else if((which_dev = devintr()) != 0){
     // ok
   } else {
@@ -72,14 +110,14 @@ usertrap(void)
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     setkilled(p);
   }
-
+end:
   if(killed(p))
     exit(-1);
 
   // give up the CPU if this is a timer interrupt.
   if(which_dev == 2)
     yield();
-
+  
   usertrapret();
 }
 
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..5262ac5 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -308,22 +308,42 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  // char *mem;
 
-  for(i = 0; i < sz; i += PGSIZE){
+  for(i = 0; i < sz; i += PGSIZE) {
+    if(i >= MAXVA)
+      goto err;
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
     pa = PTE2PA(*pte);
+
+    // *pte |= PTE_COW;
+    // *pte &= (~PTE_W);
     flags = PTE_FLAGS(*pte);
-    if((mem = kalloc()) == 0)
+    flags |= PTE_COW;
+    flags &= (~PTE_W);
+
+    // if((mem = kalloc()) == 0)
+    //   goto err;
+    // memmove(mem, (char*)pa, PGSIZE);
+    
+    // if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
+    //   kfree(mem);
+    //   goto err;
+    // }
+
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
       goto err;
-    memmove(mem, (char*)pa, PGSIZE);
-    if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
-      kfree(mem);
+    }
+    inc_ref(pa);
+    uvmunmap(old, i, 1, 0);
+    // Re-add the mapping with write bit cleared flags.
+    if (mappages(old, i, PGSIZE, pa, flags) != 0) {
       goto err;
     }
+    
   }
   return 0;
 
@@ -355,7 +375,41 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
-    pa0 = walkaddr(pagetable, va0);
+
+    if(va0 >= MAXVA) {
+      return -1;
+    }
+
+    pte_t *pte;
+
+    if((pte = walk(pagetable, va0, 0)) == 0) 
+      return -1;
+
+    if(!(*pte & PTE_V) || !(*pte & PTE_U))
+      return -1;
+
+    pa0 = PTE2PA(*pte);
+    if (*pte & PTE_COW) {
+      uint flags;
+      char *mem;
+
+      flags = PTE_FLAGS(*pte);
+      flags |= PTE_W;
+      flags &= (~PTE_COW);
+
+      if((mem = kalloc()) == 0)
+        return -1;
+      memmove(mem, (char*)pa0, PGSIZE);
+
+      uvmunmap(pagetable, va0, 1, 0);
+
+      kfree((void*)pa0); //decrement reference count;
+
+      if (mappages(pagetable, va0, PGSIZE, (uint64)mem, flags) != 0) {
+        panic("panic: copyout mapping");
+      }
+    }
+    // pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
     n = PGSIZE - (dstva - va0);
@@ -370,6 +424,8 @@ copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
   return 0;
 }
 
+
+
 // Copy from user to kernel.
 // Copy len bytes to dst from virtual address srcva in a given page table.
 // Return 0 on success, -1 on error.
diff --git a/user/cowtest.c b/user/cowtest.c
new file mode 100644
index 0000000..29b918f
--- /dev/null
+++ b/user/cowtest.c
@@ -0,0 +1,197 @@
+//
+// tests for copy-on-write fork() assignment.
+//
+
+#include "kernel/types.h"
+#include "kernel/memlayout.h"
+#include "user/user.h"
+
+// allocate more than half of physical memory,
+// then fork. this will fail in the default
+// kernel, which does not support copy-on-write.
+void
+simpletest()
+{
+  uint64 phys_size = PHYSTOP - KERNBASE;
+  int sz = (phys_size / 3) * 2;
+
+  printf("simple: ");
+  
+  char *p = sbrk(sz);
+  if(p == (char*)0xffffffffffffffffL){
+    printf("sbrk(%d) failed\n", sz);
+    exit(-1);
+  }
+
+  for(char *q = p; q < p + sz; q += 4096){
+    *(int*)q = getpid();
+  }
+
+  int pid = fork();
+  if(pid < 0){
+    printf("fork() failed\n");
+    exit(-1);
+  }
+
+  if(pid == 0)
+    exit(0);
+
+  wait(0);
+
+  if(sbrk(-sz) == (char*)0xffffffffffffffffL){
+    printf("sbrk(-%d) failed\n", sz);
+    exit(-1);
+  }
+
+  printf("ok\n");
+}
+
+// three processes all write COW memory.
+// this causes more than half of physical memory
+// to be allocated, so it also checks whether
+// copied pages are freed.
+void
+threetest()
+{
+  uint64 phys_size = PHYSTOP - KERNBASE;
+  int sz = phys_size / 4;
+  int pid1, pid2;
+
+  printf("three: ");
+  
+  char *p = sbrk(sz);
+  if(p == (char*)0xffffffffffffffffL){
+    printf("sbrk(%d) failed\n", sz);
+    exit(-1);
+  }
+
+  pid1 = fork();
+  if(pid1 < 0){
+    printf("fork failed\n");
+    exit(-1);
+  }
+  if(pid1 == 0){
+    pid2 = fork();
+    if(pid2 < 0){
+      printf("fork failed");
+      exit(-1);
+    }
+    if(pid2 == 0){
+      for(char *q = p; q < p + (sz/5)*4; q += 4096){
+        *(int*)q = getpid();
+      }
+      for(char *q = p; q < p + (sz/5)*4; q += 4096){
+        if(*(int*)q != getpid()){
+          printf("wrong content\n");
+          exit(-1);
+        }
+      }
+      exit(-1);
+    }
+    for(char *q = p; q < p + (sz/2); q += 4096){
+      *(int*)q = 9999;
+    }
+    exit(0);
+  }
+
+  for(char *q = p; q < p + sz; q += 4096){
+    *(int*)q = getpid();
+  }
+
+  wait(0);
+
+  sleep(1);
+
+  for(char *q = p; q < p + sz; q += 4096){
+    if(*(int*)q != getpid()){
+      printf("wrong content\n");
+      exit(-1);
+    }
+  }
+
+  if(sbrk(-sz) == (char*)0xffffffffffffffffL){
+    printf("sbrk(-%d) failed\n", sz);
+    exit(-1);
+  }
+
+  printf("ok\n");
+}
+
+char junk1[4096];
+int fds[2];
+char junk2[4096];
+char buf[4096];
+char junk3[4096];
+
+// test whether copyout() simulates COW faults.
+void
+filetest()
+{
+  printf("file: ");
+  
+  buf[0] = 99;
+
+  for(int i = 0; i < 4; i++){
+    if(pipe(fds) != 0){
+      printf("pipe() failed\n");
+      exit(-1);
+    }
+    int pid = fork();
+    if(pid < 0){
+      printf("fork failed\n");
+      exit(-1);
+    }
+    if(pid == 0){
+      sleep(1);
+      if(read(fds[0], buf, sizeof(i)) != sizeof(i)){
+        printf("error: read failed\n");
+        exit(1);
+      }
+      sleep(1);
+      int j = *(int*)buf;
+      if(j != i){
+        printf("error: read the wrong value\n");
+        exit(1);
+      }
+      exit(0);
+    }
+    if(write(fds[1], &i, sizeof(i)) != sizeof(i)){
+      printf("error: write failed\n");
+      exit(-1);
+    }
+  }
+
+  int xstatus = 0;
+  for(int i = 0; i < 4; i++) {
+    wait(&xstatus);
+    if(xstatus != 0) {
+      exit(1);
+    }
+  }
+
+  if(buf[0] != 99){
+    printf("error: child overwrote parent\n");
+    exit(1);
+  }
+
+  printf("ok\n");
+}
+
+int
+main(int argc, char *argv[])
+{
+  simpletest();
+
+  // check that the first simpletest() freed the physical memory.
+  simpletest();
+
+  threetest();
+  threetest();
+  threetest();
+
+  filetest();
+
+  printf("ALL COW TESTS PASSED\n");
+
+  exit(0);
+}
